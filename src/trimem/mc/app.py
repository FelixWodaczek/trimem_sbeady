"""Trimem command line interface

Command line application for the trimem package. It is installed
as `mc_app`. See ``mc_app --help``.
"""
import io
import argparse

from .config import write_default_config, read_config
from .util import run as irun

# helpers
def run(args):
    """Command action to run a simulation."""
    config = read_config(args.conf)
    irun(config, args.restart)

def config(args):
    """Command action to write default config."""
    if args.conf:
        write_default_config(args.conf, args.strip)
    else:
        out = io.StringIO()
        write_default_config(out, args.strip)
        print(out.getvalue())

def cli():
    """Shell entrypoint."""

    descr = """Trimem: Monte Carlo Sampling of lipid membranes. This
    application can be used to run simulations that are parametrized by an
    INI-style configuration file. A default config file can be generated by the
    `config` subcommand. Simulations are executed with the `run` subcommand.
    Please refer to the specific subcommand's help messages.
    """
    parser = argparse.ArgumentParser(description=descr)
    parser.set_defaults(func=lambda x: parser.print_usage())
    subparsers = parser.add_subparsers(title="subcommands")

    # config subparser
    parse_config = subparsers.add_parser(
        "config",
        help="write default config file.",
        description="Generate default configuration file for trimem."
    )
    parse_config.add_argument(
        "--strip",
        help="strip comments from config file output.",
        action="store_true"
    )
    parse_config.add_argument(
        "--conf",
        help="file name to write to. If skipped or left empty, " + \
             "the configuration is printed on screen.",
        default="",
        type=str
    )
    parse_config.set_defaults(func=config)

    # run subparser
    parse_run = subparsers.add_parser(
        "run",
        help="run simulation.",
        description="Run a simulation parametrized by a configuration file."
    )
    parse_run.add_argument(
        "--conf",
        help="configuration file name (see `mc_app config --help`).",
        required=True
    )
    parse_run.add_argument(
        "--restart",
        help="restart index. If RESTART is specified, a restart from a " + \
             "checkpoint file with number RESTART is attempted. If RESTART " + \
             "is omitted, a restart from the last checkpoint is attempted.",
        nargs="?",
        default=None,
        const=-1,
        type=int
    )
    parse_run.set_defaults(func=run)

    # execute command
    args = parser.parse_args()
    args.func(args)
